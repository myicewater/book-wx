<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
	xmlns:util="http://www.springframework.org/schema/util"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
    	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.0.xsd"
	>
	 <description>Quartz的本地Cron式执行任务配置</description>
        <!-- Quartz本地Schduler -->
        <bean id="localQuartzScheduler" class="org.springframework.scheduling.quartz.SchedulerFactoryBean" lazy-init="false">
                <!-- Triggers集成 -->
                <property name="triggers">
                        <list>
                                <ref bean="isPayTrigger" />
                                <ref bean="cashTrigger" />  
                        </list>
                </property>
                
                <!-- Quartz配置 -->
                <property name="quartzProperties">
                        <props>
                                <prop key="org.quartz.threadPool.threadCount">5</prop>
                        </props>
                </property>
                <!-- 启动时延期10秒开始任务 -->
                <property name="startupDelay" value="10" />
        </bean>
        
     
      <bean id="isPayTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
      	 <property name="jobDetail" ref="isPayJobDetail" />
         <!-- <property name="cronExpression" value="0/5 * * * * ?" /> -->
        <!--  <property name="cronExpression" value="0 1 0 * * ?" /> -->
        <property name="cronExpression" value="0 01 00 * * ?" /> 
      </bean> 
      <bean id="cashTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
      	 <property name="jobDetail" ref="cashJobDeatil" />
         <!-- <property name="cronExpression" value="0 0/1 0 * * ?" /> -->
         <property name="cronExpression" value="0 0/1 * * * ?" />
      </bean>
      
        <!-- Cron JobDetajil, 基于MethodInvokingJobDetailFactoryBean调用普通Spring Bean -->
        <!-- 
                	同一任务在前一次执行未完成而Trigger时间又到时是否并发开始新的执行, 默认为true.
         -->
        <bean id="isPayJobDetail" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
                <property name="targetObject" ref="isPayJob" />
                <property name="targetMethod" value="work" />
                <property name="concurrent" value="false" />
        </bean>
        
         <!-- 兑付 -->
        <bean id="cashJobDeatil" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
                <property name="targetObject" ref="cashJob" />
                <property name="targetMethod" value="work" />
                <property name="concurrent" value="false" />
       </bean>
       
        <!-- 被Cron执行的普通Spring Bean -->
        <bean id="isPayJob" class="com.frame.job.QuartzDemo" >
        	<property name="memberService" ref="memberService"></property>
        	<!-- <property name="headPath" ref="headPath"></property> -->
	    </bean> 
	    
	   <!-- 兑付记录-->
        <bean id="cashJob" class="com.frame.job.CashRecordJob" >
        	<property name="cashService" ref="cashService"></property>
	    </bean> 
</beans>